NOTES on my virtual machines
by Kent A Reed, 20131023
amended 20131106

Of course, one can run buildslaves on real machines but this quickly
becomes cumbersome as more and more buildslaves for different distros,
realtime kernels, and architectures are added.

The answer lies in running the buildslaves and their host OSes on 
virtual machines (no surprise there!).

Some thoughts:

1. I use libvirt tools such as virt-manager to create and maintain
   VMs which I run in QEMU/KVM. The default system disk size offered
   by virt-manager when creating a new VM is 8GB. This is more than
   enough space to load up all the prerequisites and build LCNC. However,
   it is totally inadequate for building a new realtime kernel (see, e.g.,
   the Zultron instuctions on the LinuxCNC Wiki or 
   https://github.com/zultron/debian-linuxcnc-autobuild). I have found
   the minimum disk size to be something near 25GB so I round up to 
   30GB when creating a VM for such a purpose. There's nothing more
   frustrating than to run a build for hours only to have it die in 
   its tracks because it's filled the disk with temporary files. 

   Remember, too, that after a kernel build succeeds and the temporary
   files have been flushed an additional 10GB-12GB will have been taken
   up by the packages which were built, so don't try to run Zultron's
   script to build all possibilities if you have limited disk space.

   As for VM memory, I had been accepting the default 1024MB offered by
   virt-manager. This size has worked well enough building UBC3 on all
   my VMs so far *except* jessie-{rtpreempt|xenomai}-amd64. On these 
   two VMs, the make process was failing with the following ominous 
   message at the end

    "g++: internal compiler error: Killed (program cc1plus)
     Please submit a full bug report,
     with preprocessed source if appropriate.
     See <file:///usr/share/doc/gcc-4.8/README.Bugs> for instructions."

   Actually, the machine is running out of memory during the make process. 
   Increasing the VM memory to 1280MB allowed the build to run to
   completion and successfully execute runtsts on these two VMs.

2. Don't forget that you will want the VMs to start automatically when
   their host system boots, so make the appropriate settings. 

   On the host system, set the VMs to autostart. There's more than one
   way to do that, including using virsh (cli) or virt-manager (window). 
   See the appropriate documentation. Be sure to test the settings
   are correct by rebooting the host and checking the VMs booted.

   On the VMs, make sure the grub configuration will start the 
   appropriate kernel by default. On Debian-based systems, one edits
   /etc/default/grub to change the GRUB_DEFAULT line appropriately,
   then runs update-grub for the change to take effect.

   This can get complicated. On many of my systems, the desired kernel
   appears in a secondary grub menu which typically is named "Previous
   Linux versions" and this has to be taken into account. Suppose the 
   secondary menu is the third entry in the primary menu and suppose 
   the desired kernel,named "Ubuntu, with Linux 3.5.7-xenomai-2.6.2.1", 
   is the second entry in the secondary menu. It is possible to use the 
   entry positions in the menus (counting from zero) to choose this kernel 
   to boot by default by setting

   GRUB_DEFAULT=2>1. 

   However, update-grub may move these entries up and down in the menus, 
   so I highly recommend name the selections in /etc/default/grub. 
   For the example entries above, the same line now reads
  
   GRUB_DEFAULT="Previous Linux versions>Ubuntu, with Linux 3.5.7-xenomai-2.6.2.1"
   
   Don't forget to run update-grub when done and don't forget to test that
   (re)booting works as intended before walking away. For example, any
   spelling or capitalization mistake will result in grub booting the old
   default kernel. As well, there can't be spaces either side of ">".

3. I already pointed out in my buildslaves.notes that I find it 
   advantageous to give each of my VMs a hostname which indicates the
   buildslave it will be running.

4. The libvirt tools set up a virtual network for the VMs. Several
   approaches are offered for communicating between the virtual network
   and the rest of the world. A copy of dnsmasq is set up to run on the
   host system and service the VMs. If there is a firewall running on
   the host system, some fiddling may be required to get everything
   communicating properly since the virtual network will appear to be
   yet another network to it. 
